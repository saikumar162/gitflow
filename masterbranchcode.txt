master branch production code

$ git  pull
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details.

    git pull <remote> <branch>

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=origin/<branch> product-release1-feature1

/d/saikumar/gitflow (product-release1-feature1)
$ git checkout master
Switched to branch 'master'
Your branch is up to date with 'origin/master'.

/d/saikumar/gitflow (master)
$ cls
bash: cls: command not found

/d/saikumar/gitflow (master)
$ clear

/d/saikumar/gitflow (master)
$ git pull
Already up to date.

/d/saikumar/gitflow (master)
$ git checkout product-release1
Switched to branch 'product-release1'

/d/saikumar/gitflow (product-release1)
$ git add *

/d/saikumar/gitflow (product-release1)
$ git commit -m "product-release1 file added"
[product-release1 cbd86b5] product-release1 file added
 1 file changed, 1 insertion(+), 1 deletion(-)
/d/saikumar/gitflow (product-release1)
$ git checkout product-release1-feature1
Switched to branch 'product-release1-feature1'

/d/saikumar/gitflow (product-release1-feature1)
$ git add *

/d/saikumar/gitflow (product-release1-feature1)
$ git commit -m "product-release1-feature1 file added"
[product-release1-feature1 b2f2ecc] product-release1-feature1 file added
 1 file changed, 1 insertion(+)
 create mode 100644 product-release1-feature1.txt

/d/saikumar/gitflow (product-release1-feature1)
$ git merge product-release1
hint: Waiting for your editor to close the file... "code merge"
Merge made by the 'recursive' strategy.
 product-release1.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

/d/saikumar/gitflow (product-release1-feature1)
$ "code merge""
> git  commit -m "code merge completed"
> ^C

/d/saikumar/gitflow (product-release1-feature1)
$ git commit -m "code merged"
On branch product-release1-feature1
nothing to commit, working tree clean

/d/saikumar/gitflow (product-release1-feature1)
$ git pull
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details.

    git pull <remote> <branch>

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=origin/<branch> product-release1-feature1


/d/saikumar/gitflow (product-release1-feature1)
$ git add *

/d/saikumar/gitflow (product-release1-feature1)
$ git commit -m "feature1 file added"
On branch product-release1-feature1
nothing to commit, working tree clean

/d/saikumar/gitflow (product-release1-feature1)
$ git checkout product-releae1-feature1
error: pathspec 'product-releae1-feature1' did not match any file(s) known to gi                                                                                                                t.

/d/saikumar/gitflow (product-release1-feature1)
$ git checkout product-release1
Switched to branch 'product-release1'

/d/saikumar/gitflow (product-release1)
$ git push -u origin product-release1
Counting objects: 6, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (6/6), 551 bytes | 110.00 KiB/s, done.
Total 6 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), done.
To https://github.com/saikumar162/gitflow.git
   e1608c3..cbd86b5  product-release1 -> product-release1
Branch 'product-release1' set up to track remote branch 'product-release1' from                                                                                                                 'origin'.

/d/saikumar/gitflow (product-release1)
$ git checkout product-release1-feature1
Switched to branch 'product-release1-feature1'

/d/saikumar/gitflow (product-release1-feature1)
$ git push -u origin product-release1-feature1
Counting objects: 5, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (5/5), 641 bytes | 80.00 KiB/s, done.
Total 5 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), done.
To https://github.com/saikumar162/gitflow.git
   e1608c3..2c37ae3  product-release1-feature1 -> product-release1-feature1
Branch 'product-release1-feature1' set up to track remote branch 'product-releas                                                                                                                e1-feature1' from 'origin'.

/d/saikumar/gitflow (product-release1-feature1)
$ git merge product-release1
Already up to date.

/d/saikumar/gitflow (product-release1-feature1)
$ git checkout product-release1
Switched to branch 'product-release1'
Your branch is up to date with 'origin/product-release1'.
git pull
/d/saikumar/gitflow (product-release1)
$ git pull
Already up to date.

/d/saikumar/gitflow (product-release1)
$ git checkout product-release1-feature1
Switched to branch 'product-release1-feature1'
Your branch is up to date with 'origin/product-release1-feature1'.
git
/d/saikumar/gitflow (product-release1-feature1)
$ git pull
Already up to date.
git m
/d/saikumar/gitflow (product-release1-feature1)
$ git merge product-release1
Already up to date.

/d/saikumar/gitflow (product-release1-feature1)
$ git commit -m "code merged"
On branch product-release1-feature1
Your branch is up to date with 'origin/product-release1-feature1'.

nothing to commit, working tree clean

/d/saikumar/gitflow (product-release1-feature1)
$ git checkout product-release1
Switched to branch 'product-release1'
Your branch is up to date with 'origin/product-release1'.

/d/saikumar/gitflow (product-release1)
$ echo


/d/saikumar/gitflow (product-release1)
$ git ls
git: 'ls' is not a git command. See 'git --help'.

The most similar command is
        lfs

/d/saikumar/gitflow (product-release1)
$ git lfs
git-lfs/2.3.4 (GitHub; windows amd64; go 1.8.3; git d2f6752f)
git lfs <command> [<args>]

Git LFS is a system for managing and versioning large files in
association with a Git repository.  Instead of storing the large files
within the Git repository as blobs, Git LFS stores special "pointer
files" in the repository, while storing the actual file contents on a
Git LFS server.  The contents of the large file are downloaded
automatically when needed, for example when a Git branch containing
the large file is checked out.

Git LFS works by using a "smudge" filter to look up the large file
contents based on the pointer file, and a "clean" filter to create a
new version of the pointer file when the large file's contents change.
It also uses a pre-push hook to upload the large file contents to
the Git LFS server whenever a commit containing a new large file
version is about to be pushed to the corresponding Git server.

Commands
--------

Like Git, Git LFS commands are separated into high level ("porcelain")
commands and low level ("plumbing") commands.

High level commands
--------------------

* git lfs env:
    Display the Git LFS environment.
* git lfs checkout:
    Populate working copy with real content from Git LFS files.
* git lfs clone:
    Efficiently clone a Git LFS-enabled repository.
* git lfs fetch:
    Download git LFS files from a remote.
* git lfs fsck:
    Check GIT LFS files for consistency.
* git lfs install:
    Install Git LFS configuration.
* git lfs lock:
    Set a file as "locked" on the Git LFS server.
* git lfs locks:
    List currently "locked" files from the Git LFS server.
* git lfs logs:
    Show errors from the git-lfs command.
* git lfs ls-files:
    Show information about Git LFS files in the index and working tree.
* git lfs migrate:
    Migrate history to or from git-lfs
* git lfs pull:
    Fetch LFS changes from the remote & checkout any required working tree files                                                                                                                .
* git lfs push:
    Push queued large files to the Git LFS endpoint.
* git lfs status:
    Show the status of Git LFS files in the working tree.
* git lfs track:
    View or add Git LFS paths to Git attributes.
* git lfs unlock:
    Remove "locked" setting for a file on the Git LFS server.
* git lfs untrack:
    Remove Git LFS paths from Git Attributes.
* git lfs update:
    Update Git hooks for the current Git repository.
* git lfs version:
    Report the version number.

Low level commands
-------------------

* git lfs clean:
    Git clean filter that converts large files to pointers.
* git lfs pointer:
    Build and compare pointers.
* git lfs pre-push:
    Git pre-push hook implementation.
* git lfs smudge:
    Git smudge filter that converts pointer in blobs to the actual content.

/d/saikumar/gitflow (product-release1)
$ git ls-files
masterbranchcode.txt
product-release1.txt

/d/saikumar/gitflow (product-release1)
$ git checkout product-release1-feature1
Switched to branch 'product-release1-feature1'
Your branch is up to date with 'origin/product-release1-feature1'.

/d/saikumar/gitflow (product-release1-feature1)
$ git ls-files
masterbranchcode.txt
product-release1-feature1.txt
product-release1.txt

/d/saikumar/gitflow (product-release1-feature1)
$ git add *
/d/saikumar/gitflow (product-release1-feature1)
$ git push -u origin product-release1-feature1
Everything up-to-date
Branch 'product-release1-feature1' set up to track remote branch 'product-releas                                                                                                                e1-feature1' from 'origin'.

/d/saikumar/gitflow (product-release1-feature1)
$ git ls-files
masterbranchcode.txt
product-release1-feature1.txt
product-release1.txt

/d/saikumar/gitflow (product-release1-feature1)
$ git merge product-release1
Already up to date.

/d/saikumar/gitflow (product-release1-feature1)
$ git checkout product-release1
Switched to branch 'product-release1'
Your branch is up to date with 'origin/product-release1'.
gi
/d/saikumar/gitflow (product-release1)
$ git merge product-release1-feature1
Updating cbd86b5..2c37ae3
Fast-forward
 product-release1-feature1.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 product-release1-feature1.txt

/d/saikumar/gitflow (product-release1)
$ git ls-files
masterbranchcode.txt
product-release1-feature1.txt
product-release1.txt

/d/saikumar/gitflow (product-release1)
$ git tag -a product-release1_tag1 -m "product release1 tag1"
fatal: tag 'product-release1_tag1' already exists

/d/saikumar/gitflow (product-release1)
$ ^C

/d/saikumar/gitflow (product-release1)
$
